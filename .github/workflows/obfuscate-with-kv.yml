name: Deploy EdgeTunnel Worker

on:
  push:
分支:
      - main
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch original _worker.js
        run: |
          curl -L https://raw.githubusercontent.com/cmliu/edgetunnel/main/_worker.js -o _worker.js

      - name: Patch proxyIP logic
        run: |
          cat > _worker.js << 'EOF'
          // ===================== Patch Start =====================
          try {
              const envProxy = env.PROXYIP || env.proxyip || proxyIP;
              if (envProxy && envProxy.trim()) {
                  proxyIP = envProxy;
                  try {
                      proxyIPPool = (await 整理(proxyIP)).filter(Boolean);
                  } catch (err) {
                      console.error("解析 env PROXYIP 失败:", err);
                      proxyIPPool = proxyIP.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
                  }
              } else if (env.KV) {
                  const kvProxy = await env.KV.get("PROXYIP");
                  if (kvProxy) {
                      const lines = kvProxy.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
                      proxyIP = lines.length > 0 ? lines[0] : "";
                      try {
                          proxyIPPool = (await 整理(kvProxy)).filter(Boolean);
                      } catch (err) {
                          console.error("解析 KV PROXYIP 失败:", err);
                          proxyIPPool = lines.slice();
                      }
                  }
              }
          } catch (e) {
              console.error("读取 PROXYIP 配置失败:", e);
          }

          proxyIPs = await 整理(proxyIP);
          proxyIP = proxyIPs[Math.floor(Math.random() * proxyIPs.length)];
          // ===================== Patch End =====================
          EOF

      name: Deploy EdgeTunnel Worker

      on:
        push:
分支:
            - main
        workflow_dispatch: {}

      jobs:
        deploy:
          runs-on: ubuntu-latest

          steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Fetch original _worker.js
              run: |
                curl -L https://raw.githubusercontent.com/cmliu/edgetunnel/main/_worker.js -o _worker.js

            - name: Patch proxyIP logic
              run: |
                cat > _worker.js << 'EOF'
                // ===================== Patch Start =====================
                try {
                    const envProxy = env.PROXYIP || env.proxyip || proxyIP;
                    if (envProxy && envProxy.trim()) {
                        proxyIP = envProxy;
                        try {
                            proxyIPPool = (await 整理(proxyIP)).filter(Boolean);
                        } catch (err) {
                            console.error("解析 env PROXYIP 失败:", err);
                            proxyIPPool = proxyIP.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
                        }
                    } else if (env.KV) {
                        const kvProxy = await env.KV.get("PROXYIP");
                        if (kvProxy) {
                            const lines = kvProxy.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
                            proxyIP = lines.length > 0 ? lines[0] : "";
                            try {
                                proxyIPPool = (await 整理(kvProxy)).filter(Boolean);
                            } catch (err) {
                                console.error("解析 KV PROXYIP 失败:", err);
                                proxyIPPool = lines.slice();
                            }
                        }
                    }
                } catch (e) {
                    console.error("读取 PROXYIP 配置失败:", e);
                }

                proxyIPs = await 整理(proxyIP);
                proxyIP = proxyIPs[Math.floor(Math.random() * proxyIPs.length)];
                // ===================== Patch End =====================
                EOF

            - name: Install Wrangler
              run: |
                npm install -g wrangler

            - name: Deploy to Cloudflare Workers
              run: |
                wrangler deploy
