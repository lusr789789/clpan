name: Deploy Worker with KV ProxyIP Feature

on:
  push:

  pull_request:


jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Download latest source code
      id: download-source
      run: |
        echo "正在下载最新的原始代码..."
        curl -s -o _worker_latest.js https://raw.githubusercontent.com/cmliu/edgetunnel/main/_worker.js
        
        if [ -f _worker_latest.js ] && [ -s _worker_latest.js ]; then
          echo "✅ 最新源码下载成功"
          # 替换当前文件
          mv _worker_latest.js _worker.js
          echo "source_downloaded=true" >> $GITHUB_OUTPUT
        else
          echo "❌ 源码下载失败，使用当前版本"
          echo "source_downloaded=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Apply KV ProxyIP Patch
      id: apply-patch
      run: |
        # 检查补丁文件是否存在
        if [ -f kv_proxyip_feature_correct.patch ]; then
          echo "找到补丁文件，开始应用..."
          
          # 先尝试直接应用补丁
          if git apply --check kv_proxyip_feature_correct.patch; then
            git apply kv_proxyip_feature_correct.patch
            echo "✅ 补丁应用成功"
            echo "patch_applied=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ 补丁无法直接应用，尝试使用Node脚本修复..."
            
            # 使用Node脚本进行手动合并
            if node scripts/apply-to-original.js; then
              echo "✅ Node脚本修复成功"
              echo "patch_applied=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Node脚本修复失败，尝试下载最新代码后应用"
              
              # 如果之前没有下载最新代码，现在下载
              if [ "${{ steps.download-source.outputs.source_downloaded }}" = "false" ]; then
                curl -s -o _worker.js https://raw.githubusercontent.com/cmliu/edgetunnel/main/_worker.js
              fi
              
              # 再次尝试应用补丁
              if node scripts/apply-to-original.js; then
                echo "✅ 最终修复成功"
                echo "patch_applied=true" >> $GITHUB_OUTPUT
              else
                echo "❌ 所有修复尝试都失败"
                echo "patch_applied=false" >> $GITHUB_OUTPUT
              fi
            fi
          fi
        else
          echo "❌ 补丁文件不存在"
          echo "patch_applied=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
    - name: Deploy to Cloudflare
      if: steps.apply-patch.outputs.patch_applied == 'true'
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        command: deploy
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
    - name: Notify on Failure
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const message = '🚨 部署失败！' + 
            (context.payload.pull_request ? 
             '请检查补丁是否与最新代码冲突。PR: #' + context.payload.pull_request.number :
             '主分支部署失败，请检查日志。');
          
          github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.pull_request?.number || 1,
            body: message
          });
          
          // 也可以发送到Slack或其他通知渠道
          console.log('部署失败通知已发送');
