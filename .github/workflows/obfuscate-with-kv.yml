name: Deploy EdgeTunnel Worker
on:
    workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Fetch original _worker.js
        run: |
          curl --retry 5 --retry-delay 5 -L https://raw.githubusercontent.com/cmliu/edgetunnel/main/_worker.js -o _worker.js

      - name: Patch proxyIP logic
        run: |
          # Append patch to the end of _worker.js to preserve original content
          cat << 'EOF' >> _worker.js
          // ===================== Patch Start =====================
          let proxyIP = "";
          let proxyIPPool = [];
          try {
              const envProxy = env.PROXYIP || env.proxyip || proxyIP;
              if (envProxy && envProxy.trim()) {
                  proxyIP = envProxy;
                  try {
                      proxyIPPool = (await 整理(proxyIP)).filter(Boolean);
                  } catch (err) {
                      console.error("解析 env PROXYIP 失败:", err);
                      proxyIPPool = proxyIP.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
                  }
              } else if (env.KV) {
                  const kvProxy = await env.KV.get("PROXYIP");
                  if (kvProxy) {
                      const lines = kvProxy.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
                      proxyIP = lines.length > 0 ? lines[0] : "";
                      try {
                          proxyIPPool = (await 整理(kvProxy)).filter(Boolean);
                      } catch (err) {
                          console.error("解析 KV PROXYIP 失败:", err);
                          proxyIPPool = lines.slice();
                      }
                  }
              }
          } catch (e) {
              console.error("读取 PROXYIP 配置失败:", e);
          }
          proxyIP = (proxyIPPool && proxyIPPool.length > 0) ? proxyIPPool[Math.floor(Math.random() * proxyIPPool.length)] : "";
          // ===================== Patch End =====================
          EOF

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
      # 使用 wrangler 部署到 Cloudflare Workers，目标为 EdgeTunnel Worker
      # Deploy to Cloudflare Workers using wrangler, targeting the EdgeTunnel Worker
      # 请确保 CF_API_TOKEN 拥有对应账户的 Workers 写入权限
      # Make sure CF_API_TOKEN has Workers write permission for the corresponding account
      - name: Deploy to Cloudflare Workers
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
        run: |
          npm install -g wrangler@latest
          wrangler deploy --api-token "$CF_API_TOKEN"
