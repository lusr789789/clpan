name: 部署 EdgeTunnel Worker

on:
  push:
分支:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 仓库
        uses: actions/checkout@v3
      # 2. 下载原始 worker.js
      - name: 获取原始 _worker.js
        run: |
          curl -L https://raw.githubusercontent.com/cmliu/edgetunnel/main/_worker.js -o _worker.js

      # 3. 用新逻辑覆盖 proxyIP 部分
      - name: 覆盖 proxyIP 逻辑
        run: |
          cat > _worker.js << 'EOF'
// ===================== Patch Start =====================
try {
    const envProxy = env.PROXYIP || env.proxyip || proxyIP;
    if (envProxy && envProxy.trim()) {
        proxyIP = envProxy;
        try {
            proxyIPPool = (await 整理(proxyIP)).filter(Boolean);
        } catch (err) {
            console.error("解析 env PROXYIP 失败:", err);
            proxyIPPool = proxyIP.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
        }
    } else if (env.KV) {
        const kvProxy = await env.KV.get("PROXYIP");
        if (kvProxy) {
            const lines = kvProxy.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
            proxyIP = lines.length > 0 ? lines[0] : "";
            try {
                proxyIPPool = (await 整理(kvProxy)).filter(Boolean);
            } catch (err) {
                console.error("解析 KV PROXYIP 失败:", err);
                proxyIPPool = lines.slice();
            }
        }
    }
} catch (e) {
    console.error("读取 PROXYIP 配置失败:", e);
}

proxyIPs = await 整理(proxyIP);
proxyIP = proxyIPs[Math.floor(Math.random() * proxyIPs.length)];
// ===================== Patch End =====================
EOF
