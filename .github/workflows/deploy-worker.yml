name: 仅应用KV补丁

on:
  workflow_dispatch:
    inputs:
      branch:
        description: '要处理的分支'
        required: true
        default: 'main'

jobs:
  apply-patch:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || 'main' }}
        fetch-depth: 0

    - name: 使用 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "18"

    - name: 下载最新源码
      run: |
        echo "下载最新原始代码..."
        curl -s -o _worker.js https://raw.githubusercontent.com/cmliu/edgetunnel/main/_worker.js
        echo "✅ 源码下载完成"

    - name: 应用KV PROXYIP补丁
      id: apply-patch
      run: |
        echo "开始应用KV PROXYIP补丁..."
        
        # 备份原始文件
        cp _worker.js _worker_original.js
        
        # 方法1: 使用智能脚本
        if node scripts/apply-to-original.js; then
          echo "✅ 智能脚本应用成功"
          echo "method_used=smart_script" >> $GITHUB_OUTPUT
        else
          echo "❌ 智能脚本失败，尝试Git补丁..."
          
          # 恢复备份
          cp _worker_original.js _worker.js
          
          # 方法2: Git补丁
          if [ -f kv_proxyip_feature_correct.patch ] && git apply --check kv_proxyip_feature_correct.patch; then
            git apply kv_proxyip_feature_correct.patch
            echo "✅ Git补丁应用成功"
            echo "method_used=git_patch" >> $GITHUB_OUTPUT
          else
            echo "❌ Git补丁失败，尝试增强模式..."
            
            # 恢复备份
            cp _worker_original.js _worker.js
            
            # 方法3: 增强模式匹配
            if node scripts/apply-enhanced.js; then
              echo "✅ 增强模式应用成功"
              echo "method_used=enhanced_pattern" >> $GITHUB_OUTPUT
            else
              echo "❌ 所有补丁方法失败"
              echo "method_used=failed" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
        fi

    - name: 验证补丁结果
      run: |
        echo "验证补丁应用结果..."
        
        if [ -f _worker.js ] && [ -s _worker.js ]; then
          # 检查是否包含关键功能
          kv_check=$(grep -c "KV.*PROXYIP" _worker.js || true)
          proxyip_check=$(grep -c "proxyIPPool" _worker.js || true)
          
          echo "✅ 文件生成成功"
          echo "文件大小: $(wc -c < _worker.js) 字节"
          echo "KV相关代码行数: $kv_check"
          echo "proxyIPPool引用次数: $proxyip_check"
          
          if [ $kv_check -gt 0 ] || [ $proxyip_check -gt 0 ]; then
            echo "✅ KV补丁功能验证通过"
          else
            echo "⚠️ 未检测到KV补丁功能，但文件已生成"
          fi
        else
          echo "❌ 文件生成失败"
          exit 1
        fi

    - name: 提交更改
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add _worker.js
        
        if git diff --cached --quiet; then
          echo "没有文件更改，跳过提交"
        else
          git commit -m "chore: 应用KV PROXYIP补丁 [自动化]"
          echo "✅ 更改已提交"
        fi

    - name: 推送更改
      if: success()
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.event.inputs.branch || 'main' }}

    - name: 上传制品
      uses: actions/upload-artifact@v4
      with:
        name: patched-worker
        path: |
          _worker.js
          _worker_original.js
        retention-days: 7
